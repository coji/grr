import type {
  ButtonAction,
  MessageBlockAction,
  SlackApp,
  SlackEdgeAppEnv,
} from 'slack-cloudflare-workers'
import dayjs from '~/lib/dayjs'
import { db } from '~/services/db'
import { TOKYO_TZ } from './utils'

export function registerHomeTabHandler(app: SlackApp<SlackEdgeAppEnv>) {
  app.event('app_home_opened', async ({ payload, context }) => {
    const event = payload
    if (event.tab !== 'home') return

    const userId = event.user

    // ‰ªäÊó•„ÅÆÊó•‰ªò
    const today = dayjs().tz(TOKYO_TZ).format('YYYY-MM-DD')

    // ÊúÄËøë7Êó•ÂàÜ„ÅÆ„Ç®„É≥„Éà„É™„ÇíÂèñÂæó
    const recentEntries = await db
      .selectFrom('diaryEntries')
      .selectAll()
      .where('userId', '=', userId)
      .orderBy('entryDate', 'desc')
      .limit(7)
      .execute()

    // ‰ªäÈÄ±„ÅÆÊ∞óÂàÜÁµ±Ë®à
    const weekStart = dayjs().tz(TOKYO_TZ).startOf('week').format('YYYY-MM-DD')
    const weekEntries = recentEntries.filter(
      (entry) => entry.entryDate >= weekStart,
    )

    const moodCounts = weekEntries.reduce(
      (acc, entry) => {
        if (entry.moodValue) {
          acc[entry.moodValue] = (acc[entry.moodValue] || 0) + 1
        }
        return acc
      },
      {} as Record<number, number>,
    )

    const moodStats =
      Object.keys(moodCounts).length > 0
        ? Object.entries(moodCounts)
            .map(([value, count]) => {
              const label =
                value === '3'
                  ? '„Åª„Å£„Å®ÂÆâÂøÉ'
                  : value === '2'
                    ? '„Åµ„Å§„ÅÜ„ÅÆÊó•'
                    : '„Åä„Å§„Åã„Çå„Åï„Åæ'
              return `${label}: ${count}Êó•`
            })
            .join(' | ')
        : '‰ªäÈÄ±„ÅØ„Åæ„Å†Ë®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì'

    // Home Tab „ÅÆ„Éì„É•„Éº„ÇíÊßãÁØâ
    const blocks = [
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: 'üìî „ÅÇ„Å™„Åü„ÅÆÊó•Ë®ò',
          emoji: true,
        },
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `„Åì„Çì„Å´„Å°„ÅØÔºÅ\n‰ªäÈÄ±„ÅÆÊ∞óÂàÜ: ${moodStats}`,
        },
      },
      {
        type: 'divider',
      },
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: 'ÊúÄËøë„ÅÆ„Ç®„É≥„Éà„É™',
          emoji: true,
        },
      },
    ]

    // ÊúÄËøë„ÅÆ„Ç®„É≥„Éà„É™„Çí„É™„Çπ„ÉàË°®Á§∫
    if (recentEntries.length === 0) {
      blocks.push({
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: '_„Åæ„Å†„Ç®„É≥„Éà„É™„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÊó•Ë®ò„ÇíÊõ∏„ÅçÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜÔºÅ_',
        },
      })
    } else {
      for (const entry of recentEntries) {
        const date = dayjs(entry.entryDate).format('MÊúàDÊó•(ddd)')
        const mood = entry.moodEmoji || 'üò∂'
        const preview =
          entry.detail && entry.detail.length > 100
            ? `${entry.detail.slice(0, 100)}...`
            : entry.detail || '_Ë©≥Á¥∞„Å™„Åó_'

        blocks.push({
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `*${date} ${mood}*\n${preview}`,
          },
        })
        blocks.push({
          type: 'actions',
          elements: [
            {
              type: 'button',
              text: {
                type: 'plain_text',
                text: 'Ë¶ã„Çã',
                emoji: true,
              },
              action_id: 'view_diary_entry',
              value: entry.id,
              style: 'primary',
            },
          ],
        })
      }
    }

    await context.client.views.publish({
      user_id: userId,
      view: {
        type: 'home',
        // biome-ignore lint/suspicious/noExplicitAny: dynamic block types
        blocks: blocks as any,
      },
    })
  })

  app.action('view_diary_entry', async ({ payload, context }) => {
    const action = payload as MessageBlockAction<ButtonAction>
    const entryId = action.actions[0].value

    const entry = await db
      .selectFrom('diaryEntries')
      .selectAll()
      .where('id', '=', entryId)
      .executeTakeFirst()

    if (!entry) return

    const date = dayjs(entry.entryDate).format('YYYYÂπ¥MÊúàDÊó•(ddd)')
    const mood = entry.moodLabel || 'Êú™Ë®òÈå≤'
    const detail = entry.detail || '_Ë©≥Á¥∞„Å™„Åó_'

    await context.client.views.open({
      trigger_id: action.trigger_id,
      view: {
        type: 'modal',
        callback_id: 'view_diary_entry_modal',
        title: {
          type: 'plain_text',
          text: 'Êó•Ë®ò„ÇíË¶ã„Çã',
        },
        close: {
          type: 'plain_text',
          text: 'Èñâ„Åò„Çã',
        },
        blocks: [
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: `*Êó•‰ªò:* ${date}\n*Ê∞óÂàÜ:* ${mood}\n\n${detail}`,
            },
          },
        ],
      },
    })
  })
}
